{"version":3,"sources":["../src/parser.js"],"names":[],"mappings":";;AAAA,MAAM,MAAM,QAAQ,SAAR,EAAmB,GAAnB;;AAEZ,MAAM,KAAK,QAAQ,IAAR,CAAL;;AAEN,MAAM,SAAS,uBAAT;AACN,MAAM,UAAU,0BAAV;;AAEN,MAAM,YAAY,CAAC,IAAD,EAAO,KAAP,KAAiB,IAAI,IAAJ,EAAU,KAAV,CAAgB,KAAhB,CAAjB;;AAElB,OAAO,OAAP,GAAiB;AACf,cAAY,QAAS,GAAG,UAAH,CAAc,IAAd,IAAsB,UAAU,IAAV,EAAgB,MAAhB,CAAtB,GAAgD,EAAhD;AACrB,gBAAc,QAAQ,UAAU,IAAV,EAAgB,SAAS,QAAT,GAAoB,OAApB,GAA8B,MAA9B,CAAxB;CAFhB","file":"parser.js","sourcesContent":["const cat = require('shelljs').cat;\r\n\r\nconst fs = require('fs');\r\n\r\nconst pathRE = /^([-\\w\\/]+)(?=\\s*)$/mg; // there should just be the repo path\r\nconst hgsubRE = /^([-\\w\\/]+)(?=\\s*=.*$)/mg; // path is followed by `= {url}`\r\n\r\nconst repoPaths = (file, regex) => cat(file).match(regex);\r\n\r\nmodule.exports = {\r\n  ignoreFile: file => (fs.existsSync(file) ? repoPaths(file, pathRE) : []),\r\n  repoPathFile: file => repoPaths(file, file === '.hgsub' ? hgsubRE : pathRE),\r\n};\r\n"]}